async function convertToJsonAndHandleErrors(res) {  const hasError = !res.ok;  const statusCode = await res.status;  let data = {};  try {    data = await res.json();  } catch (err) {}  if (hasError && data && data.message) {    if (      data.message == "jwt malformed" ||      data.message == "Invalid token" ||      data.message ==        "You do not provide a JSON Web Token in the Authorization header" ||      data.message == "Session is no longer valid"    ) {      window.chrome.cookies.remove({        name: "access_token",        url: REACT_APP_BASE_URL,      });    }  }  return { data, statusCode };}function checkLinkedinProfile({ id, name, token, csrf, pictureUrl, source }) {  return fetch(`${REACT_APP_API_URL}linkedin/v2/explore`, {    method: "POST",    headers: {      ...headers,      Authorization: `Bearer ${token}`,      csrf: btoa(csrf),    },    json: true,    body: JSON.stringify({ id, name, pictureUrl, source }),  }).then(convertToJsonAndHandleErrors);}function advancedSearchLinkedin({ id, token, name, csrf, source }) {  return fetch(`${REACT_APP_API_URL}linkedin/advancedSearch`, {    method: "POST",    headers: {      ...headers,      Authorization: `Bearer ${token}`,      csrf: btoa(csrf),    },    json: true,    body: JSON.stringify({ id, name, source }),  }).then(convertToJsonAndHandleErrors);}function getEmailsLinkedin({ id, name, token, csrf, source, types }) {  return fetch(`${REACT_APP_API_URL}linkedin/v2/getEmails`, {    method: "POST",    headers: {      ...headers,      Authorization: `Bearer ${token}`,      csrf: btoa(csrf),    },    json: true,    body: JSON.stringify({ id, name, source, types }),  }).then(convertToJsonAndHandleErrors);}function checkLinkedinCompany({ id, token, csrf, source }) {  return fetch(`${REACT_APP_API_URL}linkedin/company/explore`, {    method: "POST",    headers: {      ...headers,      Authorization: `Bearer ${token}`,      csrf: btoa(csrf),    },    json: true,    body: JSON.stringify({ id, source }),  }).then(convertToJsonAndHandleErrors);}function getPatternsLinkedin({ id, token, csrf, source }) {  return fetch(`${REACT_APP_API_URL}linkedin/company/getPatterns`, {    method: "POST",    headers: {      ...headers,      Authorization: `Bearer ${token}`,      csrf: btoa(csrf),    },    json: true,    body: JSON.stringify({ id, source }),  }).then(convertToJsonAndHandleErrors);}function getWorflows({ token, filters, csrf }) {  return fetch(`${REACT_APP_API_URL}workflows/all`, {    method: "POST",    headers: {      ...headers,      Authorization: `Bearer ${token}`,      csrf: btoa(csrf),    },    body: JSON.stringify({ filters }),  }).then(convertToJsonAndHandleErrors);}function linkedInAutomation({ dataForm, token, csrf }) {  return fetch(`${REACT_APP_API_URL}workflows/inputBlock`, {    method: "POST",    headers: {      Accept: "application/json, text/plain, */*",      "Content-Type": "application/json",      Authorization: `Bearer ${token}`,      csrf: btoa(csrf),    },    body: JSON.stringify(dataForm),  }).then(convertToJsonAndHandleErrors);}function getLabels({ token, csrf }) {  return fetch(`${REACT_APP_API_URL}organization/label/getAll`, {    method: "POST",    headers: {      ...headers,      Authorization: `Bearer ${token}`,      csrf: btoa(csrf),    },  }).then(convertToJsonAndHandleErrors);}function linkedinSynchro({ cookies, token, csrf }) {  return fetch(`${REACT_APP_API_URL}linkedin/sync`, {    method: "POST",    headers: {      Accept: "application/json, text/plain, */*",      "Content-Type": "application/json",      csrf: btoa(csrf),      Authorization: `Bearer ${token}`,    },    body: JSON.stringify(cookies),  }).then(convertToJsonAndHandleErrors);}function linkedinClasses({ token, csrf }) {  return fetch(`${REACT_APP_API_URL}linkedin/classes`, {    method: "GET",    headers: {      Accept: "application/json, text/plain, */*",      "Content-Type": "application/json",      csrf: btoa(csrf),      Authorization: `Bearer ${token}`,    },  }).then(convertToJsonAndHandleErrors);}function validateLinkedinStep({ token, csrf }) {  return fetch(`${REACT_APP_API_URL}auth/steps/validateLinkedin`, {    method: "POST",    headers: {      Accept: "application/json, text/plain, */*",      "Content-Type": "application/json",      csrf: btoa(csrf),      Authorization: `Bearer ${token}`,    },  }).then(convertToJsonAndHandleErrors);}function getUser({ token, csrf }) {  return fetch(`${REACT_APP_API_URL}auth/getUser`, {    method: "POST",    headers: {      Accept: "application/json, text/plain, */*",      "Content-Type": "application/json",      csrf: btoa(csrf),      Authorization: `Bearer ${token}`,    },  }).then(convertToJsonAndHandleErrors);}function updateUser({ userFields, token, csrf }) {  const formData = new FormData();  for (let field in userFields) {    if (field === "image") {      formData.append("picture", userFields[field]);    } else if (field === "phone") {      formData.append("phone", JSON.stringify(userFields.phone));    } else if (field === "autoDiscover") {      formData.append("autoDiscover", JSON.stringify(userFields.autoDiscover));    } else {      formData.append(field, userFields[field]);    }  }  return fetch(`${REACT_APP_API_URL}auth/updateUser`, {    method: "PUT",    headers: {      Accept: { "Content-Type": "multipart/form-data" },      Authorization: `Bearer ${token}`,      csrf: btoa(csrf),    },    body: formData,  }).then(convertToJsonAndHandleErrors);}function addLead({ leads, token, csrf }) {  return fetch(REACT_APP_API_URL + "organization/lead/add", {    method: "POST",    headers: {      ...headers,      Authorization: `Bearer ${token}`,      csrf: btoa(csrf),    },    body: JSON.stringify({ leads }),  }).then(convertToJsonAndHandleErrors);}function addPreLeadToWaitingList({ linkedinId, name, token, csrf }) {  return fetch(`${REACT_APP_API_URL}organization/waitingList/add`, {    method: "POST",    headers: {      ...headers,      Authorization: `Bearer ${token}`,      csrf: btoa(csrf),    },    body: JSON.stringify({ linkedinId, name }),  }).then(convertToJsonAndHandleErrors);}function updateLead({ leads, labelId, token, csrf }) {  return fetch(`${REACT_APP_API_URL}organization/lead/update`, {    method: "PUT",    headers: {      Accept: "application/json, text/plain, */*",      "Content-Type": "application/json",      csrf: btoa(csrf),      Authorization: `Bearer ${token}`,    },    body: JSON.stringify({ leads, labelId }),  }).then(convertToJsonAndHandleErrors);}function deleteLead({ ids, token, csrf }) {  return fetch(`${REACT_APP_API_URL}organization/lead/delete`, {    method: "delete",    headers: {      Accept: "application/json, text/plain, */*",      "Content-Type": "application/json",      csrf: btoa(csrf),      Authorization: `Bearer ${token}`,    },    body: JSON.stringify({ ids }),  }).then(convertToJsonAndHandleErrors);}function getCompanies({ domains, csrf, token }) {  return fetch(`${REACT_APP_API_URL}organization/lead/companyInfo/get`, {    method: "POST",    headers: {      Accept: "application/json, text/plain, */*",      "Content-Type": "application/json",      csrf: btoa(csrf),      Authorization: `Bearer ${token}`,    },    body: JSON.stringify({ domains }),  }).then(convertToJsonAndHandleErrors);}//updateLeadInfofunction updateLeadInfos({ lead, token, csrf }) {  return fetch(`${REACT_APP_API_URL}organization/lead/updateLeadInfo`, {    method: "PUT",    headers: {      Accept: "application/json, text/plain, */*",      "Content-Type": "application/json",      csrf: btoa(csrf),      Authorization: `Bearer ${token}`,    },    body: JSON.stringify({ lead }),  }).then(convertToJsonAndHandleErrors);}function validatePluginInstallation({ token, csrf }) {  return fetch(`${REACT_APP_API_URL}auth/steps/validatePluginInstallation/`, {    method: "POST",    headers: {      "Content-Type": "application/json",      csrf: btoa(csrf),      Authorization: `Bearer ${token}`,    },    json: true,  })    .then(convertToJsonAndHandleErrors)    .catch(console.error);}function skipSteps({ token, csrf }) {  return fetch(`${REACT_APP_API_URL}auth/steps/skipSteps`, {    method: "POST",    headers: {      Accept: "application/json, text/plain, */*",      "Content-Type": "application/json",      json: true,      csrf: btoa(csrf),      Authorization: `Bearer ${token}`,    },  }).then(convertToJsonAndHandleErrors);}function reloadDashboard(type, path) {  let url = REACT_APP_BASE_URL + (path || "/*");  window.chrome.tabs.query({ url }, function (tab) {    if (tab.length) {      for (let index in tab) {        window.chrome.tabs.reload(tab[index].id);      }      let lastTab = tab[tab.length - 1];      if (type === "firstSync" && lastTab && lastTab.id) {        window.chrome.tabs.update(          lastTab.id,          { active: true, url: REACT_APP_BASE_URL + "/onboarding/" },          (tab) => {}        );      }    }  });}function createOrganization({ token, data }) {  console.log("create org ", token);  return fetch(`${REACT_APP_API_URL}organization/create`, {    method: "POST",    headers: {      /* Accept: "application/json, text/plain, *!/!*",      "Content-Type": "application/json",*/      Authorization: `Bearer ${token}`,    },    body: data,  }).then(convertToJsonAndHandleErrors);}function getPublicOrganization({ token }) {  return fetch(`${REACT_APP_API_URL}organization/publicOrganizations`, {    method: "POST",    headers: {      Accept: "application/json, text/plain, */*",      "Content-Type": "application/json",      json: true,      Authorization: `Bearer ${token}`,    },  }).then(convertToJsonAndHandleErrors);}